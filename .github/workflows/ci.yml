name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with ruff
      run: |
        ruff check app/ tests/ scripts/
        ruff format --check app/ tests/ scripts/

    - name: Type check with mypy
      run: |
        mypy app/ --ignore-missing-imports

    - name: Security check with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ --severity-level medium

    - name: Test with pytest
      env:
        REDIS_URL: redis://localhost:6379
        LLM_PROVIDER: mock
        ENABLE_CACHE: true
        LOG_LEVEL: DEBUG
      run: |
        pytest tests/ -v --tb=short --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-html
        path: htmlcov/

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  smoke-test:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Run smoke tests against Docker image
      run: |
        docker run -d --name rag-service \
          --network host \
          -e REDIS_URL=redis://localhost:6379 \
          -e LLM_PROVIDER=mock \
          -e LOG_LEVEL=INFO \
          ghcr.io/${{ github.repository }}:latest

        # Wait for service to start
        sleep 30

        # Run smoke tests
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/docs || exit 1

        # Test query endpoint
        curl -f -X POST "http://localhost:8000/query" \
          -H "Content-Type: application/json" \
          -d '{"question": "What is AI?", "top_k": 3}' || exit 1

        echo " All smoke tests passed!"

    - name: Stop container
      if: always()
      run: docker stop rag-service || true