[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rag-service"
version = "0.1.0"
description = "Production-ready RAG microservice with observability and evaluation"
authors = [{name = "MLOps Engineer", email = "engineer@example.com"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "faiss-cpu>=1.7.4",
    "sentence-transformers>=2.2.2",
    "mlflow>=2.8.0",
    "langfuse>=2.0.0",
    "ragas>=0.1.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "pypdf>=3.17.0",
    "markdown>=3.5.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "openai>=1.0.0",
    "groq>=0.4.0",
    "requests>=2.31.0",
    "redis>=4.5.0",
    "azure-keyvault-secrets>=4.7.0",
    "azure-identity>=1.14.0",
    "numpy>=1.24.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "pre-commit>=3.5.0",
    "mypy>=1.7.0",
]

[project.scripts]
rag-service = "app.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "scripts*"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise without from in exception handler
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
target-version = ['py311']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "sentence_transformers.*",
    "transformers.*",
    "torch.*",
    "langfuse.*",
    "mlflow.*",
    "ragas.*",
    "langchain.*",
    "langchain_community.*",
]
ignore_missing_imports = true

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
